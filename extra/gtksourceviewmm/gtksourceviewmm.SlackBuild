#!/bin/sh

# Written by Widya Walesa <walecha99@gmail.com>

# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -e
LANG=C
export LANG

PKGNAME=gtksourceviewmm
VERSION=2.10.0
PAK=tar.bz2
DOCS="AUTHORS ChangeLog* COPYING* HACKING INSTALL LICENSE NEWS NOTES README* \
THANKS TODO"
BUILD=1
TAG=_wls
CWD="$(pwd)"
TMP=/tmp/id-slack
PKG=$TMP/package-$PKGNAME
OUTPUT=/home/ftp/wls
SRC="$CWD"

ARCH=$(uname -m)
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -pipe -march=i486 -mtune=i686";
  LIBDIRSUFFIX="";
  CHOST="i486-slackware-linux"
elif [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -pipe -march=i486 -mtune=i686";
  LIBDIRSUFFIX="";
  CHOST="i486-slackware-linux"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -pipe -march=i486 -mtune=i686";
  LIBDIRSUFFIX="";
  CHOST="i486-slackware-linux"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -pipe -mtune=generic -m64 -fPIC";
  LIBDIRSUFFIX="64";
  CHOST="$ARCH-slackware-linux"
fi

prepare() {
mkdir -p $TMP
cd $TMP
rm -rf $PKG
rm -rf doinst.sh $PKGNAME-$VERSION
mkdir -p $PKG
mkdir -p $PKG/install
mkdir -p $OUTPUT

tar xvf $SRC/$PKGNAME-$VERSION.$PAK
cd $PKGNAME-$VERSION

# Fix permissions for building.
chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \; -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \;
}
building() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --build=$CHOST --host=$CHOST \
  --program-prefix= --program-suffix= \
  --prefix=/usr --exec-prefix=/usr \
  --bindir=/usr/bin --sbindir=/usr/sbin \
  --libdir=/usr/lib$LIBDIRSUFFIX --includedir=/usr/include \
  --mandir=/usr/man --infodir=/usr/info \
  --sysconfdir=/etc --docdir=/usr/doc/$PKGNAME-$VERSION \
  --localstatedir=/var --sharedstatedir=/var/lib \
  --disable-static --enable-shared \
  || exit 1

make || exit 1
make install DESTDIR=$PKG || exit 1
}
packaging() {
## general script - add additional scripts before this line
echo "Extracting dependencies"
find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs ldd | awk '{ print $1}' | tee -a $TMP/slack-required
(   cd /var/log/packages;
    for X in `cat $TMP/slack-required`;
        do
            grep "$X" * | cut -d : -f 1 | \
                tee -a $TMP/slack-required.tmp;
    done
)
sort -u $TMP/slack-required.tmp > $TMP/slack-required
sed -i '/aaa_elflibs/d' $TMP/slack-required
sed -i '/gcc-g++/d' $TMP/slack-required
sed -i '/mozilla-firefox/d' $TMP/slack-required
cat $TMP/slack-required | rev | cut -d / -f 1 | rev > $TMP/slack-required.tmp
cat $TMP/slack-required.tmp | rev | cut -d - -f 4- | rev > \
    $CWD/slack-required
sed -i '/openssl-solibs/d' $CWD/slack-required
sed -i 's/openssl/openssl | openssl-solibs/g' $CWD/slack-required
chown --reference=$CWD/$PKGNAME.SlackBuild $CWD/slack-required
rm -f $TMP/slack-required*

echo "Removing old libtool archives"
find $PKG -name '*.la' -exec rm {} \;

echo "Stripping binary files"
find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

echo "Setting up manual and info pages"
(
if [ -d $PKG/usr/share/man ]; then
  cp -r $PKG/usr/share/man $PKG/usr/
  rm -rf $PKG/usr/share/man
fi
)

(
if [ -d $PKG/usr/man ]; then
  cd $PKG/usr/man
  find . -type f -exec gzip -9 {} \;
  for i in $(find . -type l) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
fi
)

(
if [ -d $PKG/usr/info ]; then
  rm -f $PKG/usr/info/dir
  gzip -9 $PKG/usr/info/*.info*
fi
)

echo "Setting up documentations"
(
if [ -d $PKG/usr/share/doc/HTML ]; then
  mkdir -p $PKG/usr/doc
  cp -r $PKG/usr/share/doc/HTML $PKG/usr/doc/
  rm -rf $PKG/usr/share/doc/HTML
fi
)

(
if [ -d $PKG/usr/share/doc ]; then
  mkdir -p $PKG/usr/doc
  for D in `ls $PKG/usr/share/doc/`
    do cp -a -r $PKG/usr/share/doc/$D $PKG/usr/doc/$PKGNAME-$VERSION
  done
  rm -rf $PKG/usr/share/doc
fi
)

(
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/$PKGNAME.SlackBuild
cd $TMP/$PKGNAME-$VERSION
for X in $DOCS; do
  if [ -e $X ]; then
    cp -a $X $PKG/usr/doc/$PKGNAME-$VERSION
  fi
done
)

echo "Setting up meta package files"
(
mkdir -p $PKG/install
for META in slack-desc slack-required slack-conflict doinst.sh; do
  if [ -f $CWD/$META ]; then
    cat $CWD/$META >> $PKG/install/$META
  fi
done
)

echo "Packaging"
cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.txz
}
cleaning() {
echo "Cleaning up $TMP";
cd $TMP ; rm -rf doinst.sh $PKG $PKGNAME-$VERSION;
}
installing() {
cd /; installpkg $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.txz;
}
case $1 in
  noclean)
    prepare;
    building;
    packaging;
    installing;
    ;;
  *)
    prepare;
    building;
    packaging;
    cleaning;
    installing;
    ;;
esac

unset LANG
